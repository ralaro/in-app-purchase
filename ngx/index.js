import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var InAppPurchase = /** @class */ (function (_super) {
    __extends(InAppPurchase, _super);
    function InAppPurchase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InAppPurchase.prototype.getProducts = function (productId) { return cordova(this, "getProducts", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.buy = function (productId) { return cordova(this, "buy", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.subscribe = function (productId) { return cordova(this, "subscribe", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.consume = function (productType, receipt, signature) { return cordova(this, "consume", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.acknowledge = function (productType, receipt, signature) { return cordova(this, "acknowledge", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.restorePurchases = function () { return cordova(this, "restorePurchases", { "otherPromise": true }, arguments); };
    InAppPurchase.prototype.getReceipt = function () { return cordova(this, "getReceipt", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    InAppPurchase.pluginName = "InAppPurchase";
    InAppPurchase.plugin = "cordova-plugin-inapppurchase";
    InAppPurchase.pluginRef = "inAppPurchase";
    InAppPurchase.repo = "https://github.com/AlexDisler/cordova-plugin-inapppurchase";
    InAppPurchase.platforms = ["Android", "iOS"];
    InAppPurchase.decorators = [
        { type: Injectable }
    ];
    return InAppPurchase;
}(IonicNativePlugin));
export { InAppPurchase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luLWFwcC1wdXJjaGFzZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2RHJDLGlDQUFpQjs7OztJQVNsRCxtQ0FBVyxhQUFDLFNBQW1CO0lBWS9CLDJCQUFHLGFBQUMsU0FBaUI7SUFZckIsaUNBQVMsYUFDUCxTQUFpQjtJQWVuQiwrQkFBTyxhQUFDLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBVy9ELHdDQUFnQjtJQVloQixrQ0FBVTs7Ozs7OztnQkF6RVgsVUFBVTs7d0JBN0RYO0VBOERtQyxpQkFBaUI7U0FBdkMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIEluIEFwcCBQdXJjaGFzZVxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGxpZ2h0d2VpZ2h0IENvcmRvdmEgcGx1Z2luIGZvciBpbiBhcHAgcHVyY2hhc2VzIG9uIGlPUy9BbmRyb2lkLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSW5BcHBQdXJjaGFzZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvaW4tYXBwLXB1cmNoYXNlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBpYXA6IEluQXBwUHVyY2hhc2UpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuaWFwXG4gKiAgLmdldFByb2R1Y3RzKFsncHJvZDEnLCAncHJvZDInLCAuLi5dKVxuICogIC50aGVuKChwcm9kdWN0cykgPT4ge1xuICogICAgY29uc29sZS5sb2cocHJvZHVjdHMpO1xuICogICAgIC8vICBbeyBwcm9kdWN0SWQ6ICdjb20ueW91cmFwcC5wcm9kMScsICd0aXRsZSc6ICcuLi4nLCBkZXNjcmlwdGlvbjogJy4uLicsIHByaWNlOiAnLi4uJyB9LCAuLi5dXG4gKiAgfSlcbiAqICAuY2F0Y2goKGVycikgPT4ge1xuICogICAgY29uc29sZS5sb2coZXJyKTtcbiAqICB9KTtcbiAqXG4gKlxuICogdGhpcy5pYXBcbiAqICAgLmJ1eSgncHJvZDEnKVxuICogICAudGhlbigoZGF0YSk9PiB7XG4gKiAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gKiAgICAgLy8ge1xuICogICAgIC8vICAgdHJhbnNhY3Rpb25JZDogLi4uXG4gKiAgICAgLy8gICByZWNlaXB0OiAuLi5cbiAqICAgICAvLyAgIHNpZ25hdHVyZTogLi4uXG4gKiAgICAgLy8gfVxuICogICB9KVxuICogICAuY2F0Y2goKGVycik9PiB7XG4gKiAgICAgY29uc29sZS5sb2coZXJyKTtcbiAqICAgfSk7XG4gKlxuICogYGBgXG4gKlxuICogQGFkdmFuY2VkXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogLy8gZmlzdCBidXkgdGhlIHByb2R1Y3QuLi5cbiAqIHRoaXMuaWFwXG4gKiAgIC5idXkoJ2NvbnN1bWFibGVfcHJvZDEnKVxuICogICAudGhlbihkYXRhID0+IHRoaXMuaWFwLmNvbnN1bWUoZGF0YS5wcm9kdWN0VHlwZSwgZGF0YS5yZWNlaXB0LCBkYXRhLnNpZ25hdHVyZSkpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdwcm9kdWN0IHdhcyBzdWNjZXNzZnVsbHkgY29uc3VtZWQhJykpXG4gKiAgIC5jYXRjaCggZXJyPT4gY29uc29sZS5sb2coZXJyKSlcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0luQXBwUHVyY2hhc2UnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbmFwcHB1cmNoYXNlJyxcbiAgcGx1Z2luUmVmOiAnaW5BcHBQdXJjaGFzZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vQWxleERpc2xlci9jb3Jkb3ZhLXBsdWdpbi1pbmFwcHB1cmNoYXNlJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEluQXBwUHVyY2hhc2UgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGZ1bGwgcHJvZHVjdCBkYXRhIGZyb20gQXBwbGUvR29vZ2xlLiBUaGlzIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgbWFraW5nIHB1cmNoYXNlcy5cbiAgICogQHBhcmFtIHthcnJheTxzdHJpbmc+fSBwcm9kdWN0SWQgYW4gYXJyYXkgb2YgcHJvZHVjdCBpZHMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgfSlcbiAgZ2V0UHJvZHVjdHMocHJvZHVjdElkOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1eSBhIHByb2R1Y3QgdGhhdCBtYXRjaGVzIHRoZSBwcm9kdWN0SWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9kdWN0SWQgQSBzdHJpbmcgdGhhdCBtYXRjaGVzIHRoZSBwcm9kdWN0IHlvdSB3YW50IHRvIGJ1eS5cbiAgICogQHJldHVybnMge1Byb21pc2U8e3RyYW5zYWN0aW9uSWQ6IHN0cmluZywgcmVjZWlwdDogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZywgcHJvZHVjdFR5cGU6IHN0cmluZ30+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHRyYW5zYWN0aW9uIGRldGFpbHMuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICB9KVxuICBidXkocHJvZHVjdElkOiBzdHJpbmcpOiBQcm9taXNlPHsgdHJhbnNhY3Rpb25JZDogc3RyaW5nOyByZWNlaXB0OiBzdHJpbmc7IHNpZ25hdHVyZTogc3RyaW5nOyBwcm9kdWN0VHlwZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2FtZSBhcyBidXksIGJ1dCBmb3Igc3Vic2NyaXB0aW9uIGJhc2VkIHByb2R1Y3RzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdElkIEEgc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgcHJvZHVjdCB5b3Ugd2FudCB0byBzdWJzY3JpYmUgdG8uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt0cmFuc2FjdGlvbklkOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcsIHByb2R1Y3RUeXBlOiBzdHJpbmd9Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0cmFuc2FjdGlvbiBkZXRhaWxzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgfSlcbiAgc3Vic2NyaWJlKFxuICAgIHByb2R1Y3RJZDogc3RyaW5nXG4gICk6IFByb21pc2U8eyB0cmFuc2FjdGlvbklkOiBzdHJpbmc7IHJlY2VpcHQ6IHN0cmluZzsgc2lnbmF0dXJlOiBzdHJpbmc7IHByb2R1Y3RUeXBlOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgcHVyY2hhc2luZyBhIFwiY29uc3VtYWJsZVwiIHByb2R1Y3QgdG8gbWFyayBpdCBhcyBjb25zdW1lZC4gT24gQW5kcm9pZCwgeW91IG11c3QgY29uc3VtZSBwcm9kdWN0cyB0aGF0IHlvdSB3YW50IHRvIGxldCB0aGUgdXNlciBwdXJjaGFzZSBtdWx0aXBsZSB0aW1lcy4gSWYgeW91IHdpbGwgbm90IGNvbnN1bWUgdGhlIHByb2R1Y3QgYWZ0ZXIgYSBwdXJjaGFzZSwgdGhlIG5leHQgdGltZSB5b3Ugd2lsbCBhdHRlbXB0IHRvIHB1cmNoYXNlIGl0IHlvdSB3aWxsIGdldCB0aGUgZXJyb3IgbWVzc2FnZTpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RUeXBlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWNlaXB0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYXR1cmVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIGNvbnN1bWUocHJvZHVjdFR5cGU6IHN0cmluZywgcmVjZWlwdDogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgYWxsIHB1cmNoYXNlcyBmcm9tIHRoZSBzdG9yZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGFycmF5IG9mIHB1cmNoYXNlcy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIHJlc3RvcmVQdXJjaGFzZXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByZWNlaXB0LlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGNvbnRhaW5zIHRoZSBzdHJpbmcgZm9yIHRoZSByZWNlaXB0XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICAgIHBsYXRmb3JtczogWydpT1MnXSxcbiAgfSlcbiAgZ2V0UmVjZWlwdCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19
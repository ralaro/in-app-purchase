var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var InAppPurchaseOriginal = /** @class */ (function (_super) {
    __extends(InAppPurchaseOriginal, _super);
    function InAppPurchaseOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InAppPurchaseOriginal.prototype.getProducts = function (productId) { return cordova(this, "getProducts", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.buy = function (productId) { return cordova(this, "buy", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.subscribe = function (productId) { return cordova(this, "subscribe", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.consume = function (productType, receipt, signature) { return cordova(this, "consume", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.acknowledge = function (productType, receipt, signature) { return cordova(this, "acknowledge", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.restorePurchases = function () { return cordova(this, "restorePurchases", { "otherPromise": true }, arguments); };
    InAppPurchaseOriginal.prototype.getReceipt = function () { return cordova(this, "getReceipt", { "otherPromise": true, "platforms": ["iOS"] }, arguments); };
    InAppPurchaseOriginal.pluginName = "InAppPurchase";
    InAppPurchaseOriginal.plugin = "cordova-plugin-inapppurchase";
    InAppPurchaseOriginal.pluginRef = "inAppPurchase";
    InAppPurchaseOriginal.repo = "https://github.com/AlexDisler/cordova-plugin-inapppurchase";
    InAppPurchaseOriginal.platforms = ["Android", "iOS"];
    return InAppPurchaseOriginal;
}(IonicNativePlugin));
var InAppPurchase = new InAppPurchaseOriginal();
export { InAppPurchase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luLWFwcC1wdXJjaGFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE2RHJDLGlDQUFpQjs7OztJQVNsRCxtQ0FBVyxhQUFDLFNBQW1CO0lBWS9CLDJCQUFHLGFBQUMsU0FBaUI7SUFZckIsaUNBQVMsYUFDUCxTQUFpQjtJQWVuQiwrQkFBTyxhQUFDLFdBQW1CLEVBQUUsT0FBZSxFQUFFLFNBQWlCO0lBVy9ELHdDQUFnQjtJQVloQixrQ0FBVTs7Ozs7O3dCQXRJWjtFQThEbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBJbiBBcHAgUHVyY2hhc2VcbiAqIEBkZXNjcmlwdGlvblxuICogQSBsaWdodHdlaWdodCBDb3Jkb3ZhIHBsdWdpbiBmb3IgaW4gYXBwIHB1cmNoYXNlcyBvbiBpT1MvQW5kcm9pZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEluQXBwUHVyY2hhc2UgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2luLWFwcC1wdXJjaGFzZS9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaWFwOiBJbkFwcFB1cmNoYXNlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmlhcFxuICogIC5nZXRQcm9kdWN0cyhbJ3Byb2QxJywgJ3Byb2QyJywgLi4uXSlcbiAqICAudGhlbigocHJvZHVjdHMpID0+IHtcbiAqICAgIGNvbnNvbGUubG9nKHByb2R1Y3RzKTtcbiAqICAgICAvLyAgW3sgcHJvZHVjdElkOiAnY29tLnlvdXJhcHAucHJvZDEnLCAndGl0bGUnOiAnLi4uJywgZGVzY3JpcHRpb246ICcuLi4nLCBwcmljZTogJy4uLicgfSwgLi4uXVxuICogIH0pXG4gKiAgLmNhdGNoKChlcnIpID0+IHtcbiAqICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiAgfSk7XG4gKlxuICpcbiAqIHRoaXMuaWFwXG4gKiAgIC5idXkoJ3Byb2QxJylcbiAqICAgLnRoZW4oKGRhdGEpPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICogICAgIC8vIHtcbiAqICAgICAvLyAgIHRyYW5zYWN0aW9uSWQ6IC4uLlxuICogICAgIC8vICAgcmVjZWlwdDogLi4uXG4gKiAgICAgLy8gICBzaWduYXR1cmU6IC4uLlxuICogICAgIC8vIH1cbiAqICAgfSlcbiAqICAgLmNhdGNoKChlcnIpPT4ge1xuICogICAgIGNvbnNvbGUubG9nKGVycik7XG4gKiAgIH0pO1xuICpcbiAqIGBgYFxuICpcbiAqIEBhZHZhbmNlZFxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIGZpc3QgYnV5IHRoZSBwcm9kdWN0Li4uXG4gKiB0aGlzLmlhcFxuICogICAuYnV5KCdjb25zdW1hYmxlX3Byb2QxJylcbiAqICAgLnRoZW4oZGF0YSA9PiB0aGlzLmlhcC5jb25zdW1lKGRhdGEucHJvZHVjdFR5cGUsIGRhdGEucmVjZWlwdCwgZGF0YS5zaWduYXR1cmUpKVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygncHJvZHVjdCB3YXMgc3VjY2Vzc2Z1bGx5IGNvbnN1bWVkIScpKVxuICogICAuY2F0Y2goIGVycj0+IGNvbnNvbGUubG9nKGVycikpXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdJbkFwcFB1cmNoYXNlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW5hcHBwdXJjaGFzZScsXG4gIHBsdWdpblJlZjogJ2luQXBwUHVyY2hhc2UnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0FsZXhEaXNsZXIvY29yZG92YS1wbHVnaW4taW5hcHBwdXJjaGFzZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbkFwcFB1cmNoYXNlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmV0cmlldmVzIGEgbGlzdCBvZiBmdWxsIHByb2R1Y3QgZGF0YSBmcm9tIEFwcGxlL0dvb2dsZS4gVGhpcyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIG1ha2luZyBwdXJjaGFzZXMuXG4gICAqIEBwYXJhbSB7YXJyYXk8c3RyaW5nPn0gcHJvZHVjdElkIGFuIGFycmF5IG9mIHByb2R1Y3QgaWRzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYW4gYXJyYXkgb2Ygb2JqZWN0cy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIGdldFByb2R1Y3RzKHByb2R1Y3RJZDogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXkgYSBwcm9kdWN0IHRoYXQgbWF0Y2hlcyB0aGUgcHJvZHVjdElkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZHVjdElkIEEgc3RyaW5nIHRoYXQgbWF0Y2hlcyB0aGUgcHJvZHVjdCB5b3Ugd2FudCB0byBidXkuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt0cmFuc2FjdGlvbklkOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcsIHByb2R1Y3RUeXBlOiBzdHJpbmd9Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0cmFuc2FjdGlvbiBkZXRhaWxzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgfSlcbiAgYnV5KHByb2R1Y3RJZDogc3RyaW5nKTogUHJvbWlzZTx7IHRyYW5zYWN0aW9uSWQ6IHN0cmluZzsgcmVjZWlwdDogc3RyaW5nOyBzaWduYXR1cmU6IHN0cmluZzsgcHJvZHVjdFR5cGU6IHN0cmluZyB9PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYnV5LCBidXQgZm9yIHN1YnNjcmlwdGlvbiBiYXNlZCBwcm9kdWN0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2R1Y3RJZCBBIHN0cmluZyB0aGF0IG1hdGNoZXMgdGhlIHByb2R1Y3QgeW91IHdhbnQgdG8gc3Vic2NyaWJlIHRvLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7dHJhbnNhY3Rpb25JZDogc3RyaW5nLCByZWNlaXB0OiBzdHJpbmcsIHNpZ25hdHVyZTogc3RyaW5nLCBwcm9kdWN0VHlwZTogc3RyaW5nfT59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdHJhbnNhY3Rpb24gZGV0YWlscy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvdGhlclByb21pc2U6IHRydWUsXG4gIH0pXG4gIHN1YnNjcmliZShcbiAgICBwcm9kdWN0SWQ6IHN0cmluZ1xuICApOiBQcm9taXNlPHsgdHJhbnNhY3Rpb25JZDogc3RyaW5nOyByZWNlaXB0OiBzdHJpbmc7IHNpZ25hdHVyZTogc3RyaW5nOyBwcm9kdWN0VHlwZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCB0aGlzIGZ1bmN0aW9uIGFmdGVyIHB1cmNoYXNpbmcgYSBcImNvbnN1bWFibGVcIiBwcm9kdWN0IHRvIG1hcmsgaXQgYXMgY29uc3VtZWQuIE9uIEFuZHJvaWQsIHlvdSBtdXN0IGNvbnN1bWUgcHJvZHVjdHMgdGhhdCB5b3Ugd2FudCB0byBsZXQgdGhlIHVzZXIgcHVyY2hhc2UgbXVsdGlwbGUgdGltZXMuIElmIHlvdSB3aWxsIG5vdCBjb25zdW1lIHRoZSBwcm9kdWN0IGFmdGVyIGEgcHVyY2hhc2UsIHRoZSBuZXh0IHRpbWUgeW91IHdpbGwgYXR0ZW1wdCB0byBwdXJjaGFzZSBpdCB5b3Ugd2lsbCBnZXQgdGhlIGVycm9yIG1lc3NhZ2U6XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9kdWN0VHlwZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVjZWlwdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2lnbmF0dXJlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICB9KVxuICBjb25zdW1lKHByb2R1Y3RUeXBlOiBzdHJpbmcsIHJlY2VpcHQ6IHN0cmluZywgc2lnbmF0dXJlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0b3JlIGFsbCBwdXJjaGFzZXMgZnJvbSB0aGUgc3RvcmVcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBhcnJheSBvZiBwdXJjaGFzZXMuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb3RoZXJQcm9taXNlOiB0cnVlLFxuICB9KVxuICByZXN0b3JlUHVyY2hhc2VzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVjZWlwdC5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCBjb250YWlucyB0aGUgc3RyaW5nIGZvciB0aGUgcmVjZWlwdFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG90aGVyUHJvbWlzZTogdHJ1ZSxcbiAgICBwbGF0Zm9ybXM6IFsnaU9TJ10sXG4gIH0pXG4gIGdldFJlY2VpcHQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==